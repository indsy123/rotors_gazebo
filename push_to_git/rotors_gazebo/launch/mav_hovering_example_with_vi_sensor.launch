<?xml version="1.0"?>
<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="image_def" default="vi_sensor/camera_depth/depth"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_vi_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <!--node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen"-->
      <!--rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" /-->
      <!--rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" /-->
      <remap from="odometry" to="odometry_sensor1/odometry" />
    <!--/node-->
    <!--node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/-->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
  <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
  <node pkg="nodelet" type="nodelet" name="$(arg mav_name)_voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <remap from="~input"                to="/$(arg mav_name)/$(arg image_def)/points" />
    <remap from="~output"               to="/$(arg mav_name)/$(arg image_def)/voxel_points" />
    <param name="leaf_size"             value="0.1"/>
    <param name="filter_limit_negative" value="true"/>
  </node> 

 <!-- Run Octomap server node -->	
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="0.05" />		  	
    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->		    
    <param name="frame_id" type="string" value="world" />
    <param name="publish_free_space" value="true"/>		
    <!-- maximum range to integrate (speedup!) -->		
    <param name="sensor_model/max_range" value="0.25" />		
    <!-- data source to integrate (PointCloud2) -->		
    <remap from="cloud_in" to="/$(arg mav_name)/$(arg image_def)/voxel_points" />
  </node>

</launch>
